# PHP STRINGS AND VARIABLES
---------------------------

* Strings
---------
	In everyday conversation, we use the word data to refer to any sort of information. This information is often a list of numbers, like a company’s monthly expenses or statistics 
	about an athlete’s performance. However, in programming, data means something very specific. It’s still information, but that information takes the form of a few specific types.

	The PHP language has different ways of handling different types of data. Which actions the computer can perform and how the computer stores the data in memory will vary based on 
	the type. In this lesson, we’ll be learning about the string data type.

	Strings are words or pieces of text that the computer treats as a single item. A string is a sequence of characters. It can be any length and contain any letters, numbers, 
	symbols, or spaces surrounded by quotation marks.

		echo "My first string"; // Prints: My first string

	It’s important to distinguish between strings and the rest of the code in a PHP program. Every part of a program is text, but strings are the parts we intend to keep as data—not 
	as instructions to be executed by computer. In this lesson we’re going to focus on strings wrapped in double quotation marks (if you’re curious, you can check out the official PHP 
	documentation to see other types of PHP strings).

	In later lessons, we’ll be using PHP to create custom HTML documents enabling dynamic web pages. As we learn the basics, however, we’ll be writing simple PHP only programs that 
	run in the terminal.

	Let’s make some strings!

index.php
---------
<?php
// Write your code below:
echo "Hello, World!";

==================================================================================================================================================================

* Escape Sequences
------------------
	We use quotation marks to indicate the start and end of a string. The quotation marks tell the computer that we want everything inside them to be treated as a single piece of data. 
	But how do we include quotation marks inside a string?

	Consider the following string: "She said "hi" to the dog."

	In the code above, the quotes around “hi” are intended to be part of the string, but the computer will actually see two strings "She said " and " to the dog." with hi in between. 
	Since hi won’t be recognized as valid PHP it will result in an error:

		echo "She said "hi" to the dog."; //syntax error, unexpected 'hi' (T_STRING)

	In order to indicate which quotation marks the computer should view as instructions vs which it should view as simply characters, PHP allows for escape sequences. An escape 
	sequence usually consists of a backslash (\) immediately followed by another character.

		echo "She said \"hi\" to the dog."; // Prints: She said "hi" to the dog.

	Quotation marks aren’t the only symbol requiring an escape sequence. When we print multiple strings, PHP will print them to the same line by default:

		echo "1. Go to gym";
		echo "2. Cook dinner"; 

	The code above will output 1. Go to gym2. Cook dinner. To print the second string on a new line, we can use the newline escape sequence (\n):

		echo "1. Go to gym";
		echo "\n2. Cook dinner"; 
		/* Prints
		1. Go to gym
		2. Cook dinner
		*/

	You don’t need to worry about other escape sequences yet, but if you’d like to see the full list you can find one in the PHP documentation.

	Let’s practice!

index.php
---------
<?php
// Write your code below:
echo "1. Learn PHP";
echo "\n2. Practice Guitar";
echo "\n3. Watch a movie to \"learn\" Karate";

==================================================================================================================================================================

* String Concatenation
----------------------
	It can be useful to combine two strings together. This process is called string concatenation, and we can use the concatenation operator (.) to do this.

	An operator is a character that performs a task in our code. The computer will take the string to the left of the concatenation operator, combine it with the string to the right, 
	and return the resulting single string. Let’s see an example of string concatenation:

		echo "one" . "two"; // Prints: onetwo

	Notice how the string “onetwo” was printed. The computer won’t make any assumptions for us—it will combine the strings exactly as they are without adding any spaces or 
	line-breaks. If we want spaces, we’ll have to add any spaces we want ourselves. Here we added a space to the string "one ":

		echo "one " . "two"; // Prints: one two

	We can also combine, or chain, our operations to get a final result:

		echo "one" . " " . "two" . " " . "three"; // Prints: one two three

	The concatenation operator takes two strings (the operands) and produces a string as a result (the return value). As we delve deeper into PHP, we’ll learn about other kinds of 
	operators. Most will take one or two operands, but there’s even one that takes three.

	Let’s join some strings together!

index.php
---------
<?php
// Write your code below:   
echo "Code"."cademy";

echo "\nMy name is:"." "."Andres R. Bucheli";

echo "\n"."tur"."duck"."en";

==================================================================================================================================================================

* Variables
-----------
	Let’s say I have a really long string in my program, and I’m going to need to use it multiple times. Do I have to type the string out every time I need to use it? The answer is 
	“no”. Variables are a fundamental programming concept designed to address this concern. With variables, we store values so that we can easily reuse them throughout a program.

	Before we can use variables in our code, we need to declare and assign them.

	Declaring a variable is the process of reserving a word, the variable name, which we’ll be able to refer to in our code. It’s good practice to name the variable in a way that 
	describes the data it holds.

	Assignment is the process of associating that variable name with a specific value so that everytime we use the variable’s name the computer will grab that value.

==================================================================================================================================================================

























